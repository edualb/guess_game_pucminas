services:
  nginx:
    image: nginx:1.27.2-alpine
    container_name: guess_game_nginx_lb
    restart: always
    volumes:
      - ./configs/backend/default.conf:/etc/nginx/conf.d/backend.conf
      - ./configs/frontend/default.conf:/etc/nginx/conf.d/frontend.conf
    ports:
      - "5000:5000"
      - "3000:3000"
    depends_on:
      - frontend
      - backend_1
      - backend_2
    networks:
      - guess_game_net
  frontend:
    container_name: guess_game_fe
    restart: always
    build: 
      context: ./
      dockerfile: ./Dockerfile.frontend
      args:
        - REACT_APP_BACKEND_URL=http://localhost:5000
    networks:
      - guess_game_net
  backend_1:
    container_name: guess_game_be_1
    build: 
      context: ./
      dockerfile: ./Dockerfile.backend
    environment:
      - FLASK_DB_TYPE="postgres"
      - FLASK_DB_HOST="guess_game_db"
      - FLASK_DB_PORT="5432"
      - FLASK_DB_USER="guessgame"
      - FLASK_DB_NAME="guessgame_db"
      - FLASK_DB_PASSWORD="guessgame123"
    depends_on:
      database:
        condition: service_healthy
    networks:
      - guess_game_net
  backend_2:
    container_name: guess_game_be_2
    restart: always
    build: 
      context: ./
      dockerfile: ./Dockerfile.backend
    environment:
      - FLASK_DB_TYPE="postgres"
      - FLASK_DB_HOST="guess_game_db"
      - FLASK_DB_PORT="5432"
      - FLASK_DB_USER="guessgame"
      - FLASK_DB_NAME="guessgame_db"
      - FLASK_DB_PASSWORD="guessgame123"
    depends_on:
      database:
        condition: service_healthy
    networks:
      - guess_game_net
  database:
    image: postgres:13.16-alpine
    container_name: guess_game_db
    restart: always
    volumes:
      - database:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    environment:
      - POSTGRES_USER=guessgame
      - POSTGRES_DB=guessgame_db
      - POSTGRES_PASSWORD=guessgame123
    networks:
      - guess_game_net

networks:
  guess_game_net: {}

volumes:
  database: